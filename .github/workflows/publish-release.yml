name: Release Electron-vite Project

on:
  push:
    # 触发条件：推送标签时触发
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Checkout 代码仓库
      - name: Checkout Code
        uses: actions/checkout@v4

      # 设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"  # 根据需要调整为项目的 Node.js 版本

      # 安装项目依赖
      - name: Install Dependencies
        run: npm install

      # 构建项目
      - name: Build Project
        run: npm run build

      # 打包项目
      # 假设打包脚本会生成一个 release 目录，其中包含版本号子目录（如 4.3.1）
      # 例如：构建后文件结构为 release/4.3.1/*
      # (此步骤需要根据你的打包脚本进行调整)
    #   - name: Package Release
    #     working-directory: ./GamerFinger  # 根据你的项目目录设置
    #     run: |
    #       # 打包代码（假设此脚本会生成 release目录）
    #       npm run build
    #       # 移动打包后的文件到 release 目录，并组织成版本目录结构
    #       # 这里需要将 build 文件移动到 release/x.y.z 目录下，你需要根据项目打包结构调整
    #       mv build "release/$GITHUB_REF_NAME"

      # 获取当前版本号（通过 tag 名称）
      # 例如，如果 tag 名为 v4.3.1， 则 ${GITHUB_REF_NAME} 为 v4.3.1
      - name: Configure Release Version
        id: release-version
        run: |
          echo "tag=${GITHUB_REF}"
          echo "version=${GITHUB_REF_NAME}"
          # 假设 tag 格式是 vX.Y.Z，移除开头的 "v" 获取版本号
          # (如果你不需要移除 "v"，可以将其改为版本号)
          # 默认保留 "v" 开头的版本号
          version=${GITHUB_REF_NAME/v/}
          echo "tag=${GITHUB_REF}"
          echo "ref_name=${GITHUB_REF_NAME}"
          # 注意：如果 tag 未以 "v" 开头，可能需要调整逻辑
          tag_name=${GITHUB_REF_NAME}
          echo "::set-output name=version::${tag_name}"
          echo "::set-output name=tag::${GITHUB_REF}"

      # 获取 release 目录中的版本子目录路径
      - name: Get Release Directory Path
        id: release-path
        run: |
          # 假设 release 目录下有多个版本的子目录，找到对应的子目录
          # 这里假设 release/x.y.z 是目标文件夹
          # 可以用 ls 命令查找匹配的目录
          echo "Finding release directory matching ${GITHUB_REF_NAME}..."
          release_dir=$(ls release | grep "${GITHUB_REF_NAME}")
          if [ -z "$release_dir" ]; then
            echo "No release directory found for version ${GITHUB_REF_NAME}"
            exit 1
          else
            echo "::set-output name=release_path::${GITHUB_WORKSPACE}/release/${release_dir}"
          fi

      # 创建 GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.release-version.outputs.version }}
          body: |
            **Electron-vite Project Release**
            version: ${{ steps.release-version.outputs.version }}
            commit: ${{ github.sha }}
            build time: ${{ github.event.created }}
          draft: false
          prerelease: false

      # 列出 release 目录中的文件
      - name: List Release Files
        run: ls -R release

      # 获取需要上传的文件路径
      # 该步骤用于过滤 release/x.y.z 目录下的文件，只上传非文件夹类型的文件
      - name: Prepare Files for Upload
        id: files
        run: |
          # 获取 release/x.y.z/ 目录下的所有非文件夹文件路径
          # 假设 release_path 变量已经通过前面的步骤设置成功
          release_path=${{ steps.release-path.outputs.release_path }}
          echo "release_path: $release_path"
          # 使用 find 命令查找所有非目录文件
          files=$(find "$release_path" -type f)
          # 或者使用 ls 命令：
          # files=$(ls "$release_path")
          # 这里可以根据实际情况调整
          # 注意：需要确保路径正确
          echo "::set-output name=files::$files"

      # 上传资产
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.files.outputs.files }}